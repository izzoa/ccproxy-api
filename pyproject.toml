[project]
name = "ccproxy-api"
# version = "0.1.0"
dynamic = ["version"]
description = "API server that provides an Anthropic and OpenAI compatible interface over Claude Code, allowing to use your Claude OAuth account or over the API."
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
  "aiofiles>=24.1.0",
  "jsonschema>=4.23.0",
  "fastapi[standard]>=0.115.14",
  "httpx[http2]>=0.28.1",
  "pydantic>=2.8.0",
  "pydantic-settings>=2.4.0",
  "rich>=13.0.0",
  "rich-toolkit>=0.14.8",
  "structlog>=25.4.0",
  "typer>=0.16.0",
  "typing-extensions>=4.0.0",
  "uvicorn>=0.34.0",
  "packaging>=25.0",
  "aiohttp>=3.12.15",
  "sortedcontainers>=2.4.0",
  "pyjwt>=2.10.1",
]

[build-system]
# Using hatchling to used git tag for version
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"
# requires = ["uv"]
# build-backend = "uv.build"

[tool.hatch.version]
source = "vcs"


[tool.hatch.build.hooks.vcs]
version-file = "ccproxy/core/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["ccproxy"]
include = ["ccproxy/data/*.json"]

[tool.hatch.build.targets.sdist]
include = [
  "ccproxy/**/*.py",
  "ccproxy/**/*.json",
  "ccproxy/static/dashboard/**",
  "README.md",
  "LICENSE",
  "pyproject.toml",
]

[dependency-groups]
plugins-claude = ["claude-code-sdk>=0.0.19", "qrcode>=8.2"]
plugins-codex = ["qrcode>=8.2", "pyjwt>=2.10.1"]
plugins-storage = [
  "sqlmodel>=0.0.24",
  "SQLAlchemy>=2.0.0",
  "duckdb-engine>=0.17.0",
  "duckdb>=1.1.0",
]
plugins-mcp = ["fastapi-mcp>=0.3.7"]
plugins-tui = ["textual>=3.7.1", "aioconsole>=0.8.1"]
plugins-metrics = ["prometheus-client>=0.22.1"]
plugins-docker = []
test = [
  "mypy",
  "pytest",
  "pytest-asyncio",
  "pytest-cov",
  "pytest-timeout",
  "pytest-env",
  "pytest-httpx",
  "pytest-xdist",
]
dev = [
  "ruff",
  "pre-commit",
  "mypy",
  "tox",
  "bandit",
  "types-aiofiles>=24.0.0",
  "types-PyYAML>=6.0.12.12",
]

[project.scripts]
# ccproxy = "ccproxy.cli:app"
ccproxy = "ccproxy.cli:main"
ccproxy-api = "ccproxy.cli:main"
ccproxy-perm = "ccproxy.cli.commands.permission:main"

[project.entry-points."ccproxy.plugins"]
access_log = "ccproxy.plugins.access_log.plugin:factory"
analytics = "ccproxy.plugins.analytics.plugin:factory"
claude_api = "ccproxy.plugins.claude_api.plugin:factory"
claude_sdk = "ccproxy.plugins.claude_sdk.plugin:factory"
codex = "ccproxy.plugins.codex.plugin:factory"
command_replay = "ccproxy.plugins.command_replay.plugin:factory"
copilot = "ccproxy.plugins.copilot.plugin:factory"
dashboard = "ccproxy.plugins.dashboard.plugin:factory"
docker = "ccproxy.plugins.docker.plugin:factory"
duckdb_storage = "ccproxy.plugins.duckdb_storage.plugin:factory"
metrics = "ccproxy.plugins.metrics.plugin:factory"
oauth_claude = "ccproxy.plugins.oauth_claude.plugin:factory"
oauth_codex = "ccproxy.plugins.oauth_codex.plugin:factory"
permissions = "ccproxy.plugins.permissions.plugin:factory"
pricing = "ccproxy.plugins.pricing.plugin:factory"
request_tracer = "ccproxy.plugins.request_tracer.plugin:factory"

[tool.coverage.run]
include = ["ccproxy/*"]
source = ["ccproxy/*", "tests/*"]
# include = ["ccproxy/*", "tests/*"]
# source = ["ccproxy/*", "tests/*"]
omit = [
  "ccproxy/core/_version.py",
  "ccproxy/__main__.py",
  "tests/conftest.py",
  "*/migrations/*",
  "*/__pycache__/*",
  "*/.*",
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
sort = "Cover"
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "from typing import",
  "VERSION_TUPLE = Tuple",
  "class .*Protocol.*:",
  "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
target-version = "py311"
line-length = 88

src = ["ccproxy", "tests"]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # Pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "PTH", # flake8-use-pathlib
]

ignore = [
  "E501",   # Line too long (handled by formatter)
  "B008",   # Do not perform function calls in argument defaults
  "N806",   # Variable in function should be lowercase (for pandas df, etc)
  "SIM108", # Use ternary operator (sometimes less readable)
  "F401",   # Imported but unused
  "F841",   # Local variable assigned but never used
  "B904",   # "Use 'except*' to catch multiple exceptions"
  "SIM102", # "Use 'set' operations to compute set intersections"
]

[tool.ruff.lint.flake8-tidy-imports]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["TID251"]
# relax on tests
"tests/*" = [
  "N802",
  "N803",
  "B023",
] # arg/function name should be lowercase, allow assert, does not bind loop variable


[tool.ruff.format]
quote-style = "double"
indent-style = "space"


[tool.ruff.lint.isort]
known-first-party = ["ccproxy"]
force-single-line = false
lines-after-imports = 2


[tool.mypy]
python_version = "3.11"
show_column_numbers = true
follow_imports = "normal"
exclude = [
  "^[^/]+\\.py$",
  "docs/",
  "site/",
  "examples/",
  "scripts/",
  "git_ignore/",
]
namespace_packages = true
explicit_package_bases = true

# Enable all strict mode flags
strict = true
# The following settings are enabled by --strict:
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_any_unimported = true
warn_unreachable = false

# if we need to disable certain strict checks
# disallow_incomplete_defs = false
# disallow_untyped_decorators = false


[[tool.mypy.overrides]]
module = ["fastapi_mcp"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "plugins.permissions.mcp"
disable_error_code = ["unused-ignore"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
disallow_untyped_defs = false
disallow_untyped_calls = false
warn_unused_ignores = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  # "--disable-warnings",
  "--tb=short",
  "-v",
  "--import-mode=importlib",
  "-m",
  "not slow",
  # "--cov=ccproxy",
  # "--cov=tests",
  # "--cov-report=term-missing",
  # "--cov-report=html:htmlcov",
  # "--cov-report=xml",
  # "--cov-branch",
  # "--cov-fail-under=80",
]
testpaths = ["tests"]
## Plugin tests are colocated under tests/plugins/<plugin>/
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# timeout = 60  # Requires pytest-timeout plugin
# timeout_method = "thread"

asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

norecursedirs = [
  ".git",
  ".tox",
  "dist",
  "build",
  "*.egg",
  "venv",
  ".venv",
  ".devenv",
  "node_modules",
  "__pycache__",
  ".devenv",
  "tests_new",
]

# Set test mode to prevent pollution of real credential files
# env = ["PYTEST_CURRENT_TEST=true"]  # Requires pytest-env plugin

# Use modern import mode to avoid path-based module collisions
# import-mode = "importlib"

# Test markers for different test categories and tiers
markers = [
  # Primary test categories
  "unit: Fast unit tests (< 1s each) that don't require external dependencies",
  "integration: Integration tests (< 30s each) that test component interactions",
  "e2e: Integration tests (< 30s each) that test component interactions",
  "slow: Slow tests (> 30s each) - use sparingly",
  "smoketest: Quick validation tests for core endpoints",

  # External dependency markers
  "real_api: Tests that make real API calls to external services (requires API keys)",
  "docker: Tests that require Docker to be running",
  "network: Tests that require network access but don't make real API calls",

  # Feature-specific markers
  "auth: Authentication and authorization tests",
  "streaming: SSE/streaming response tests",
  "api: API endpoint tests",
  "config: Configuration and settings tests",
  "cli: Command-line interface tests",
  "metrics: Metrics and monitoring tests",
  "sdk: SDK endpoint tests using Anthropic SDK client (requires running server)",
  "claude_api: Claude API plugin tests",
  "codex: Codex plugin tests",
  "analytics: Analytics plugin tests",

  # Test quality markers
  "flaky: Tests that may be unreliable and need investigation",
  "skip_ci: Tests to skip in CI environment",
  "performance: Performance and micro-benchmark oriented tests",
]

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts", "examples"]
skips = [
  "B101",
  "B601",
  "B110",
  "B113",
] # Skip assert_used, shell_injection_possible, try_except_pass, request_without_timeout

[tool.tox]
legacy_tox_ini = """
  [tox]
  envlist = py311,py312,py313

  [testenv]
  deps =
      pytest
      pytest-asyncio
      pytest-cov
      pytest-timeout
      pytest-env
      pytest-httpx

  commands = pytest {posargs}
  """

[tool.setuptools.packages.find]
include = ["ccproxy*"]

[tool.uv]
package = true

[tool.uv.sources]
claude-code-sdk = { git = "https://github.com/anthropics/claude-code-sdk-python.git" }


[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "standard" # or "strict"

include = ["ccproxy", "tests"]

# Exclude unnecessary directories
exclude = [
  "**/__pycache__",
  ".venv",
  "venv",
  "build",
  "dist",
  "*.egg-info",
  ".git",
  ".tox",
  "htmlcov",
  ".pytest_cache",
  ".mypy_cache",
  ".ruff_cache",
  ".devenv",
]

# Virtual environment configuration
# venvPath = "."
# venv = ".venv" # Adjust if using different name

# Extra paths for import resolution
extraPaths = ["."]

# Type checking settings
reportMissingImports = "warning"
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = true
reportPrivateUsage = "warning"
reportUnboundVariable = true
reportUnusedCoroutine = true
reportGeneralTypeIssues = true
reportUnnecessaryTypeIgnoreComment = true

# Stub settings
stubPath = "typings"
useLibraryCodeForTypes = true
