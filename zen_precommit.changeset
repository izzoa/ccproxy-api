diff --git a/.env.example b/.env.example
index 050451b..9e490a4 100644
--- a/.env.example
+++ b/.env.example
@@ -3,10 +3,10 @@
 # Required: Anthropic API Key
 ANTHROPIC_API_KEY=your_anthropic_api_key_here
 
-# Optional: Server Configuration
-HOST=0.0.0.0
-PORT=8000
-LOG_LEVEL=INFO
+# Server Configuration
+SERVER__HOST=0.0.0.0
+SERVER__PORT=8000
+SERVER__LOG_LEVEL=INFO
 
 # Optional: Security Configuration
 CLAUDE_USER=claude
diff --git a/Makefile b/Makefile
index 8ad935d..ed51e61 100644
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,6 @@
 .PHONY: help install dev-install clean test test-unit test-real-api test-watch test-fast test-file test-match test-coverage lint typecheck format check pre-commit ci build dashboard docker-build docker-run docs-install docs-build docs-serve docs-clean
 
-$(eval VERSION_DOCKER := $(shell uv run python3 scripts/format_version.py docker))
+$(eval VERSION_DOCKER := $(shell uv run python3 scripts/format_version.py docker 2>/dev/null || echo "latest"))
 
 # Common variables
 UV_RUN := uv run
diff --git a/README.md b/README.md
index e6e2f89..516c959 100644
--- a/README.md
+++ b/README.md
@@ -495,6 +495,35 @@ SERVER__PORT=8080
 # etc.
 ```
 
+## Authentication & Security Architecture
+
+CCProxy uses a **three-layer authentication architecture** that serves different purposes:
+
+```
+Client Applications → [ANTHROPIC_API_KEY] → CCProxy → [Claude OAuth] → Anthropic API
+```
+
+### Understanding the Two Token Types
+
+**`ANTHROPIC_API_KEY`** (Client Configuration):
+- Used by **client applications** when connecting to your CCProxy instance
+- Set in client environment variables to point to your proxy
+- **Purpose**: Client identification and configuration
+- **Not used** by the proxy for upstream authentication
+
+**`SECURITY__AUTH_TOKEN`** (Proxy Security - Optional):
+- Used to **secure the CCProxy server itself** 
+- When set: ALL client requests must include valid authentication
+- When unset: Proxy runs in "open mode" (no client authentication required)
+- **Purpose**: Access control for your proxy instance
+
+### Proxy-to-Anthropic Authentication
+
+The proxy itself uses **Claude OAuth credentials** (not environment variables) for upstream API calls:
+- Credentials stored in `~/.config/claude/.credentials.json`
+- In Docker: mounted via volumes from host system
+- Managed by Claude CLI (`claude auth login`)
+
 ## Securing the Proxy (Optional)
 
 You can enable token authentication for the proxy. This supports multiple header formats (`x-api-key` for Anthropic, `Authorization: Bearer` for OpenAI) for compatibility with standard client libraries.
@@ -527,6 +556,40 @@ curl -H "x-api-key: your-token" ...
 curl -H "Authorization: Bearer your-token" ...
 ```
 
+### Configuration Scenarios
+
+**Scenario A: Development (No Proxy Security)**
+```bash
+# .env file - no SECURITY__AUTH_TOKEN set
+ANTHROPIC_API_KEY=dummy-key
+
+# Client usage
+export ANTHROPIC_API_KEY=dummy-key
+export ANTHROPIC_BASE_URL=http://localhost:8000/api
+```
+*Clients can use any dummy API key. Proxy uses Claude OAuth for upstream.*
+
+**Scenario B: Secured Proxy**
+```bash
+# .env file - enable proxy authentication  
+ANTHROPIC_API_KEY=your-client-api-key
+SECURITY__AUTH_TOKEN=your-secure-proxy-token
+
+# Client usage
+export ANTHROPIC_API_KEY=your-secure-proxy-token  # Must match SECURITY__AUTH_TOKEN
+export ANTHROPIC_BASE_URL=http://localhost:8000/api
+```
+*Clients must use the proxy's security token. Recommended for production.*
+
+**Scenario C: Docker Deployment**
+```yaml
+# docker-compose.yml
+volumes:
+  - ~/.config/claude:/data/home/.config/claude:ro  # Claude OAuth credentials
+  - ~/.codex/auth.json:/data/home/.codex/auth.json:ro  # OpenAI credentials
+```
+*Proxy automatically uses mounted credentials for upstream authentication.*
+
 ## Observability
 
 `ccproxy` includes an optional but powerful observability suite for monitoring and analytics. When enabled, it provides:
diff --git a/docker-compose.yml b/docker-compose.yml
index a6c14d3..0ca4119 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -4,18 +4,18 @@ services:
       context: .
       dockerfile: Dockerfile
     ports:
-      - "8000:8000"
+      - "${SERVER__PORT:-8000}:${SERVER__PORT:-8000}"
     environment:
-      - SERVER__HOST=0.0.0.0
-      - SERVER__PORT=8000
-      - SERVER__LOG_LEVEL=INFO
       - PUID=${PUID:-1000}
       - PGID=${PGID:-1000}
-    # env_file:
-    #   - .env
+    env_file:
+      - .env
+    volumes:
+      - ~/.config/claude:/data/home/.config/claude:ro
+      - ~/.codex/auth.json:/data/home/.codex/auth.json:ro
     restart: unless-stopped
     healthcheck:
-      test: ["CMD", "curl", "-f", "http://localhost:$SERVER__PORT/health"]
+      test: ["CMD-SHELL", "curl -f http://localhost:${SERVER__PORT:-8000}/health || exit 1"]
       interval: 30s
       timeout: 10s
       retries: 3